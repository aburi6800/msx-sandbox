; ====================================================================================================
; asm08.asm
; keymatrix read test program
; ====================================================================================================
SECTION code_user
PUBLIC _main

_main:
; ====================================================================================================
; テスト用の処理
; ====================================================================================================
    CALL INIT                       ; 初期処理

    LD HL,STRDATA
    CALL PRTSTR                     ; 文字列表示

MAINLOOP:
    CALL GET_KEYMATRIX              ; キーマトリクス読み込み

    LD HL,7*32+6+PTN_NAME_ADDR      ; 入力値の表示開始位置
    LD DE,KEYBUFF                   ; キー入力バッファの先頭アドレス
    LD B,10                         ; ループ回数(10キー分のキーバッファワークを読む)

MAINLOOP_L1:
    LD A,(DE)                       ; A <- キーバッファの値
    ADD A,$30                       ; 0 or 1 の文字コード
    CALL WRTVRM

    INC HL                          ; 表示位置+2
    INC HL

    INC DE                          ; キーバッファアドレス+1

    DJNZ MAINLOOP_L1


    LD HL,8*32+6+PTN_NAME_ADDR      ; 入力値の表示開始位置
    LD DE,KEYBUFF_SV                ; キー入力バッファSVの先頭アドレス
    LD B,10                         ; ループ回数(10キー分のキーバッファワークを読む)

MAINLOOP_L2:
    LD A,(DE)                       ; A <- キーバッファの値
    ADD A,$30                       ; 0 or 1 の文字コード
    CALL WRTVRM

    INC HL                          ; 表示位置+2
    INC HL

    INC DE                          ; キーバッファアドレス+1

    DJNZ MAINLOOP_L2

	; ■垂直帰線待ち
	HALT

	JR MAINLOOP


; ====================================================================================================
; キーマトリクス取得処理
; ====================================================================================================
GET_KEYMATRIX:

    LD HL,KEYBUFF                   ; HL <- キーバッファアドレス
    LD DE,KEYBUFF_SV                ; HL <- キー入力バッファSVの先頭アドレス

    LD A,0                          ; キーマトリクスの0行目をスキャン対象
    CALL SNSMAT                     ; BIOS キーマトリクススキャン
    CALL GET_KEYMATRIX_SUB          ; 入力キーの情報をバッファに設定

    LD A,1                          ; キーマトリクスの1行目をスキャン対象
    CALL SNSMAT                     ; BIOS キーマトリクススキャン
    CALL GET_KEYMATRIX_SUB          ; 入力キーの情報をバッファに設定

    RET


GET_KEYMATRIX_SUB:
    ; ■以下前提
    ;   - Aレジスタにスキャン結果のデータが入っている
    ;   - HLレジスタにキーバッファのアドレスが設定されている
    ;   - DEレジスタにキー入力バッファSVのアドレスが設定されている
    LD B,8                          ; 0〜7ビットをスキャンするためのループ回数
    LD C,A                          ; C <- A (値を退避)

GET_KEYMATRIX_SUB_L1:
    LD A,C                          ; A <- C (退避した値をAレジスタに戻す)
    AND %00000001                   ; 下位1ビットを判定
    JR NZ,GET_KEYMATRIX_SUB_L2      ; ビットが立っている=キーが押されていないならL2へ

    ; ■キーが押されているときの処理
    ;   キー入力バッファSVの値を読み、OFFの時だけキー入力バッファをONにする
    ;   キー入力バッファSVがONの時は押しっぱなしなので、キー入力バッファをOFFにする
    LD A,(DE)                       ; A <- キー入力バッファSV
    OR A
    JR Z,GET_KEYMATRIX_SUB_L12      ; キー入力バッファSVがOFFの時はL12へ

    LD (HL),KEY_OFF                 ; キー入力バッファにOFFを設定
                                    ; キー入力バッファSVはそのままで良いので何もしない
    JR GET_KEYMATRIX_SUB_L3

GET_KEYMATRIX_SUB_L12:
    LD (HL),KEY_ON                  ; キー入力バッファにONを設定
    LD A,KEY_ON
    LD (DE),A                       ; キー入力バッファSVにONを設定
    JR GET_KEYMATRIX_SUB_L3

GET_KEYMATRIX_SUB_L2:
    ; ■キーが押されていないときの処理
    LD (HL),KEY_OFF                 ; キーバッファワークにキーオフを設定
    LD A,KEY_OFF
    LD (DE),A                       ; キー入力バッファSVにOFFを設定

GET_KEYMATRIX_SUB_L3:
    INC HL                          ; キーバッファワークのアドレスを+1
    INC DE                          ; キー入力バッファSVのアドレスを+1
    SRL C                           ; Cレジスタの値を右シフト

    DJNZ GET_KEYMATRIX_SUB_L1

    RET


; ====================================================================================================
; 文字列表示サブルーチン
; IN  : HL = 表示文字データの開始アドレス
; ====================================================================================================
PRTSTR:
    LD B,(HL)                       ; BC <- HLアドレスの示すオフセット値データ
    INC HL
    LD C,(HL)

    INC HL                          ; HL <- 文字列データの先頭アドレス
    PUSH HL                         ; HL -> DE
    POP DE

    LD HL,PTN_NAME_ADDR             ; HL <- パターンネームテーブルの先頭アドレス
    ADD HL,BC                       ; HL=HL+BC

PRTSTR_L1:
	LD A,(DE)				        ; AレジスタにDEレジスタの示すアドレスのデータを取得
	OR 0					        ; 0かどうか
    JR Z,PRTSTR_END			        ; 0の場合はPRTENDへ

	CALL WRTVRM				        ; BIOS WRTVRM呼び出し
	    					        ; - HL : 書き込み先のVRAMアドレス
    	                            ; - A  : 書き込むデータ

	INC HL					        ; HL=HL+1
    INC DE					        ; DE=DE+1
    JR PRTSTR_L1

PRTSTR_END:
	RET


; ====================================================================================================
; 初期処理
; ====================================================================================================
INIT:
    CALL SCREEN_INIT
    RET


; ====================================================================================================
; 画面初期化
; ====================================================================================================
SCREEN_INIT:
    ; ■COLOR 15,1,1
    LD A,15                         ; Aレジスタに文字色をロード 
    LD (FORCLR),A                   ; Aレジスタの値をワークエリアに格納
    LD A,1                          ; Aレジスタに全景色をロード
    LD (BAKCLR),A                   ; Aレジスタの値をワークエリアに格納
;    LD A,1                         ; Aレジスタに背景色をロード
    LD (BDRCLR),A                   ; Aレジスタの値をワークエリアに格納

    ; ■SCREEN 1,2,0
    LD A,(REG1SAV)                  ; AレジスタにVDPコントロールレジスタ1の値をロード
    OR 2                            ; ビット2を立てる(=スプライトモードを16x16に設定)
    LD (REG1SAV),A                  ; Aレジスタの値をVDPコントロールレジスタ1のワークエリアに格納
    LD A,1                          ; Aレジスタにスクリーンモードの値を設定
    CALL CHGMOD                     ; BIOS スクリーンモード変更
    LD A,0                          ; Aレジスタにキークリックスイッチの値(0=OFF)をロード
    LD (CLIKSW),A                   ; Aレジスタの値をワークエリアに格納

    ; ■WIDTH 32
    LD A,32                         ; AレジスタにWIDTHの値を設定
    LD (LINL32),A                   ; Aレジスタの値をワークエリアに格納

    ; ■KEY OFF
    CALL ERAFNC                     ; BIOS ファンクションキー非表示

    RET


; ====================================================================================================
; 定数エリア
; romに格納される
; ====================================================================================================
SECTION rodata_user

; ■BIOSアドレス定義
RDVRM:		            EQU $004A	; BIOS RDVRM
WRTVRM:		            EQU $004D	; BIOS WRTVRM
CHGMOD:                 EQU $005F   ; BIOS スクリーンモード変更
ERAFNC:                 EQU $00CC   ; BIOS ファンクションキー非表示
KILBUF:                 EQU $0156   ; BIOS キーバッファクリア
SNSMAT:                 EQU $0141   ; BIOS キーマトリクススキャン

; ■システムワークエリアアドレス定義
REG0SAV:                EQU $F3DF   ; VDPコントロールレジスタ0
REG1SAV:                EQU $F3E0   ; VDPコントロールレジスタ1
FORCLR:                 EQU $F3E9   ; 前景色
BAKCLR:                 EQU $F3EA   ; 背景色
BDRCLR:                 EQU $F3EB   ; 周辺色
LINL32:                 EQU $F3AF   ; WIDTH値
CLIKSW:                 EQU $F3DB   ; キークリックスイッチ(0:OFF,0以外:ON)
INTCNT:                 EQU $FCA2   ; システムで1/60秒でインクリメントするワークエリア

; ■VRAMワークエリアアドレス定義
PTN_GEN_ADDR:           EQU $0000   ; VRAM パターンジェネレータテーブルの先頭アドレス
PTN_NAME_ADDR:          EQU $1800   ; VRAM パターンネームテーブルの先頭アドレス
COLOR_TABLE_ADDR:       EQU $2000   ; VRAM カラーテーブルの先頭アドレス
SPR_PTN_ADDR:	        EQU $3800	; VRAM スプライトパターンジェネレータの先頭アドレス
SPR_ATR_ADDR:	        EQU	$1B00	; VRAM スプライトアトリビュートエリアの先頭アドレス

; ■キースキャン用定数
KEY_ON:                 EQU $01     ; キーオン
KEY_OFF:                EQU $00     ; キーオフ

; ■表示文字列データ
; dw : 表示先のVRAMアドレスのオフセット値(下位/上位)    
; db : 表示文字列、最後に0を設定すること
STRDATA:
    DW $C600
	DB "0 1 2 3 4 5 6 7 8 9",0


; ====================================================================================================
; ワークエリア
; プログラム起動時にcrtでゼロでramに設定される 
; ====================================================================================================
SECTION bss_user

; ■キーバッファ
KEYBUFF:
    DB  $00,$00,$00,$00,$00,$00,$00,$00
    DB  $00,$00,$00,$00,$00,$00,$00,$00
KEYBUFF_SV:
    DB  $00,$00,$00,$00,$00,$00,$00,$00
    DB  $00,$00,$00,$00,$00,$00,$00,$00


; ====================================================================================================
; ワークエリア
; プログラム起動時にcrtでramに値が設定される 
; ====================================================================================================
SECTION data_user
