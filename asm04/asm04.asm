; ====================================================================================================
; asm04.asm
; ・asm03.asmをベースに以下を追加
; ・カーソルキーの入力受付
; ・カーソルキーの入力した結果を元にスプライトキャラクターの座標を変更する
; ====================================================================================================
SECTION code_user
PUBLIC _main

_main:
; ====================================================================================================
; 初期処理
; ====================================================================================================
    CALL INIT                   ; 初期設定


; ====================================================================================================
; メインループ
; ====================================================================================================
MAINLOOP:
    ; ■プレイヤー操作
    CALL PLAYER_CTRL            ; プレイヤー操作サブルーチン呼び出し

	; ■ちょっとだけ待つ
    							; ウェイトカウンタの値を減算
    LD HL,WAIT_CNT              ; - HLレジスタにウェイトカウンタのアドレスを設定
	DEC (HL)				    ; - ウェイトカウンタの値から1引く

								; ウェイトカウンタの値を判定
	JR NZ, VSYNC		        ; - Aレジスタの値がゼロじゃなかったらVSYNCにジャンプ

								; ウェイトカウンタの値をリセット
	LD A,10						; - Aレジスタに10をロード
	LD (WAIT_CNT),A				; - WAIT_CNTにAレジスタの値を保存

    CALL SPRITE_UPDATE

VSYNC:
	; ■垂直帰線待ち
	HALT

	JR MAINLOOP


; ====================================================================================================
; プレイヤー操作情報取得サブルーチン
; ====================================================================================================
PLAYER_CTRL:
    ; ■キーバッファクリア
    CALL KILBUF                 ; キーバッファクリア

    ; ■カーソルキー／ジョイスティックの入力をワークエリアに設定
    ;   前回までの入力値との比較をできるようにワークエリアは2byte取ってあるが
    ;   今は使っていない
    CALL GTSTCK
    OR A
    JR Z,PLAYER_CTRL_END        ; ゼロだったら終了
    
    LD (INPUT_BUFF_STICK),A     ; 入力バッファ(STICK)に入力値を設定    

PLAYER_CTRL_END:
    RET


; ====================================================================================================
; スプライトキャラクター更新
; ====================================================================================================
SPRITE_UPDATE:

;    LD B,10                     ; キャラクター数
    LD B,0                      ; キャラクター数

SPRITE_UPDATE_LOOP:
    CALL SPRITE_MOVE            ; スプライト移動

SPRITE_UPDATE_LOOP_END:
;    DJNZ SPRITE_UPDATE_LOOP

    RET

SPRITE_MOVE:
    ; ■スプライト移動
    ; IN  : B = キャラクターNo

    ; スプライトキャラクターワークテーブルのアドレスを求める
    LD A,B
    CALL GET_SPRITE_WORK_ADDR   ; IXレジスタにスプライトキャラクターワークテーブルのアドレスを取得

    ; キャラクターの属性に対応する処理のアドレスをLOGIC_TBLから取得し、ジャンプする
    ; IN  : A = 対象のテーブルNo
    LD A,(IX+4)                 ; Aレジスタに属性の値をロード
    SUB 1                       ; 属性値は1からなので、1引く

    RLCA                        ; Aレジスタの値を左ローテート(=2倍する)
    LD E,A                      ; DEレジスタにアドレスの加算値を設定
    LD D,0
    LD HL,LOGIC_TBL             ; HLレジスタにLOGIC_TBLの先頭アドレスをロード
    ADD HL,DE                   ; HLレジスタにアドレスの加算値を加えて、取得データのアドレスを確定
    LD E,(HL)
    INC HL
    LD D,(HL)
    EX DE,HL

    JP (HL)


; ====================================================================================================
; スプライトキャラクターワークテーブルのアドレスを求める
; IN  : A = キャラクター番号
; OUT : IX = 対象キャラクターのワークデータの先頭アドレス
; ====================================================================================================
GET_SPRITE_WORK_ADDR:
    PUSH HL
    
    LD HL,SPR_WK_TBL            ; HLレジスタにスプライトキャラクターワークテーブルのアドレスを設定
    SLA A                       ; Aレジスタの値を8倍する
    SLA A    
    SLA A    
    ADD HL,A                    ; HLレジスタにAレジスタの値を加算
    LD IX,HL

    POP HL

    RET


; ====================================================================================================
; プレイヤー移動
; 処理後はSPRITE_UPDATE_LOOP_ENDにJPする
; ====================================================================================================
MOVE_PLAYER:

    LD B,0                      ; BレジスタにキャラクターNo(0)を設定

	; スプライトのパターン番号書き換え
    ; ここはキャラクターデータにパターンテーブルの番号を持たせて、
    ; パターンテーブルからアドレスを取得するようにしたい
    							; 参照先のアニメーションパターンテーブルのアドレスを求める
    LD HL,(PTN_ADDR)			; - HLレジスタにアニメーションパターンテーブルの参照アドレスの値をロード
    INC HL						; - HL=HL+1(ひとつ次のデータのアドレスへ)

								; 参照先のアニメーションパターンテーブルの値をロードする
	LD A,(HL)					; - AレジスタにHLレジスタが示すアドレスの値をロード
    OR 0						; - 0かどうか
    JR NZ,MOVE_PLAYER_1	        ; - 0でなければMOVE_PLAYER_1にジャンプ

								; ロードした値が0の時はアニメーションパターンテーブルの先頭を参照先にする
    LD HL,PTN_TBL				; - HLレジスタにアニメーションパターンテーブルの先頭アドレスを設定
	LD A,(HL)					; - AレジスタにHLレジスタが示すアドレス(＝アニメーションパターンテーブルの最初のアドレス)の値をロードしなおす

MOVE_PLAYER_1:
    LD (PTN_ADDR),HL			; アニメーションパターンテーブルの参照アドレスにHLレジスタの値を設定

	                            ; スプライトパターン番号を取得する
	LD A,(HL)					; - AレジスタにHLレジスタが示すアドレス（＝アニメーションパターンテーブルの参照先アドレス）の値をロード
	DEC A						; - A=A-1（パターンテーブルの値はスプライトパターン番号+1が設定されているため）
    							; - Aレジスタの値を4倍する
	SLA A						;
	SLA A						;
	LD (IX+2),A		            ; - Aレジスタの値をスプライトキャラクターワークテーブルのスプライトパターン番号に設定

    ; プレイヤー操作データ(STICK)を取得
    LD A,(INPUT_BUFF_STICK)

    ; STICKの値を判定
    OR A
    JP Z,MOVE_PLAYER_EXIT

MOVE_PLAYER_2:                  ; 上方向
    CP 1
    JP NZ,MOVE_PLAYER_3

    LD IX,SPR_WK_TBL
    LD A,(IX)                   ; Y座標を取得
    CP 1
    JP Z,MOVE_PLAYER_EXIT       ; Y座標=1なら抜ける
    SUB 2
    LD (IX),A
    JP MOVE_PLAYER_EXIT

MOVE_PLAYER_3:
    CP 3
    JP NZ,MOVE_PLAYER_4

    LD IX,SPR_WK_TBL
    LD A,(IX+1)                 ; X座標を取得
    CP 240
    JP Z,MOVE_PLAYER_EXIT       ; Y座標=240なら抜ける
    ADD 2
    LD (IX+1),A
    JP MOVE_PLAYER_EXIT

MOVE_PLAYER_4:
    CP 5
    JP NZ,MOVE_PLAYER_5

    LD IX,SPR_WK_TBL
    LD A,(IX)                   ; Y座標を取得
    CP 176
    JP Z,MOVE_PLAYER_EXIT       ; Y座標=176なら抜ける
    ADD 2
    LD (IX),A
    JP MOVE_PLAYER_EXIT

MOVE_PLAYER_5:
    CP 7
    JP NZ,MOVE_PLAYER_EXIT

    LD IX,SPR_WK_TBL
    LD A,(IX+1)                 ; X座標を取得
    CP 1
    JP Z,MOVE_PLAYER_EXIT       ; X座標=1なら抜ける
    SUB 2
    LD (IX+1),A

MOVE_PLAYER_EXIT:
	; スプライトアトリビュートエリア更新
	CALL SET_SPRATR				; スプライトアトリビュート設定

    JP SPRITE_UPDATE_LOOP_END 


; ====================================================================================================
; 敵移動
; 処理後はSPRITE_UPDATE_LOOP_ENDにJPする
; ====================================================================================================
MOVE_ENEMY:
    NOP

MOVE_ENEMY_EXIT:
    JP SPRITE_UPDATE_LOOP_END


; ====================================================================================================
; 初期設定
; ====================================================================================================
INIT:
    ; ------------------------------------------------------------------------------------------------
    ; 画面設定
    ; ------------------------------------------------------------------------------------------------
SCREEN_INIT:
    ; COLOR 15,1,1
    LD A,15                     ; Aレジスタに文字色をロード 
    LD (FORCLR),A               ; Aレジスタの値をワークエリアに格納
    LD A,1                      ; Aレジスタに全景色をロード
    LD (BAKCLR),A               ; Aレジスタの値をワークエリアに格納
;    LD A,1                      ; Aレジスタに背景色をロード
    LD (BDRCLR),A               ; Aレジスタの値をワークエリアに格納

    ; SCREEN 1,2,0
    LD A,(REG1SAV)              ; AレジスタにVDPコントロールレジスタ1の値をロード
    OR 2                        ; ビット2を立てる(=スプライトモードを16x16に設定)
    LD (REG1SAV),A              ; Aレジスタの値をVDPコントロールレジスタ1のワークエリアに格納
    LD A,1                      ; Aレジスタにスクリーンモードの値を設定
    CALL CHGMOD                 ; BIOS スクリーンモード変更
    LD A,0                      ; Aレジスタにキークリックスイッチの値(0=OFF)をロード
    LD (CLIKSW),A               ; Aレジスタの値をワークエリアに格納

    ; WIDTH 32
    LD A,32                     ; AレジスタにWIDTHの値を設定
    LD (LINL32),A               ; Aレジスタの値をワークエリアに格納

    ; KEY OFF
    CALL ERAFNC                 ; BIOS ファンクションキー非表示

    ; ------------------------------------------------------------------------------------------------
    ; ワークエリア初期化
    ; ------------------------------------------------------------------------------------------------
	LD HL,PTN_TBL				; アニメーションパターンテーブル参照先アドレス初期化
    LD (PTN_ADDR),HL

    LD A,10                     ; ウェイトカウントの初期化
    LD (WAIT_CNT),A

    LD B,0
    LD C,0
    ; ■スプライトキャラクターワークエリア設定
    ;   将来的にサブルーチン化する
    ;   B = スプライトキャラクターワークエリアのNo
    ;   C = スプライトアトリビュート初期値データのNo

    LD A,B
    CALL GET_SPRITE_WORK_ADDR
    LD IY,IX

    LD HL,SPR_ATR_INIT_DATA
    LD A,C
    ADD A
    ADD A
    ADD HL,A
    LD IX,HL

    LD A,(IX)
    LD (IY),A                   ; スプライトアトリビュート初期値データ1バイト目(Y座標)
    LD A,(IX+1)
    LD (IY+1),A                 ; スプライトアトリビュート初期値データ2バイト目(X座標)
    LD A,(IX+2)
    LD (IY+2),A                 ; スプライトアトリビュート初期値データ3バイト目(パターンNo)
    LD A,(IX+3)
    LD (IY+3),A                 ; スプライトアトリビュート初期値データ4バイト目(カラーコード)
    LD (IY+4),1                 ; 属性(1=プレイヤー)
    LD (IY+5),0                 ; 移動方法(0=移動なし)

    ; ------------------------------------------------------------------------------------------------
    ; スプライト定義
    ; ------------------------------------------------------------------------------------------------
	CALL SET_SPRPTN				; スプライトパターン定義
    LD B,0                      ; BレジスタにキャラクターNo(0)を設定
	CALL SET_SPRATR				; スプライトアトリビュート設定

	RET


; ====================================================================================================
; スプライトパターン定義
; 本当はここで割り込み停止／再開をした方がいいかもしれない
; ====================================================================================================
SET_SPRPTN:
    PUSH HL
    PUSH BC
    PUSH DE

	LD HL,SPR_PTN_DATA			; HLレジスタにスプライトデータの先頭アドレスを設定
    LD DE,SPR_PTN_ADDR			; DEレジスタにスプライトパターンジェネレータの先頭アドレスを設定
	LD BC,8*4*3					; BCレジスタにスプライトデータのサイズを指定
    CALL LDIRVM					; BIOS VRAMブロック転送

    POP DE
    POP BC
    POP HL

	RET


; ====================================================================================================
; スプライトアトリビュート定義
; 本当はここで割り込み停止／再開をした方がいいかもしれない
; IN  : B = 設定対象のキャラクターNo
; ====================================================================================================
SET_SPRATR:
    PUSH HL
    PUSH BC
    PUSH DE

    ; DEレジスタに転送先のスプライトアトリビュートエリアのアドレスを設定する
    LD A,B
    SLA A                       ; - A=A*2                       
    SLA A                       ; - A=A*2
    LD HL,SPR_ATR_ADDR			; DEレジスタにスプライトアトリビュートエリアの先頭アドレスを設定
    ADD HL,A
    LD DE,HL

    ; HLレジスタに転送元のスプライトキャラクターテーブルのアドレスを設定する
    LD A,B
    SLA A                       ; - A=A*2                       
    SLA A                       ; - A=A*2
    SLA A                       ; - A=A*2
	LD HL,SPR_WK_TBL		    ; HLレジスタにスプライトアトリビュートデータの先頭アドレスを設定
    ADD HL,A

    ; BCレジスタに転送サイズ(byte)を設定する
    LD BC,4					    ; BCレジスタにアトリビュートデータのサイズを指定

    CALL LDIRVM					; BIOS VRAMブロック転送

    POP DE
    POP BC
    POP HL

    RET


; ====================================================================================================
; 定数エリア
; romに格納される
; ====================================================================================================
SECTION rodata_user

; BIOSアドレス定義
LDIRVM:			    EQU	$005C	; BIOS:VRAMブロック転送
CHGMOD:             EQU $005F   ; BIOS:スクリーンモード変更
ERAFNC:             EQU $00CC   ; BIOS:ファンクションキー非表示
KILBUF:             EQU $0156   ; BIOS:キーバッファクリア
GTSTCK:             EQU $00D5   ; BIOS:カーソルキー・ジョイスティックのの状態取得

; システムワークエリアアドレス定義
REG0SAV:            EQU $F3DF   ; VDPコントロールレジスタ0
REG1SAV:            EQU $F3E0   ; VDPコントロールレジスタ1
FORCLR:             EQU $F3E9   ; 前景色
BAKCLR:             EQU $F3EA   ; 背景色
BDRCLR:             EQU $F3EB   ; 周辺色
LINL32:             EQU $F3AF   ; WIDTH値
CLIKSW:             EQU $F3DB   ; キークリックスイッチ(0:OFF,0以外:ON)

; VRAMワークエリアアドレス定義
SPR_PTN_ADDR:	    EQU $3800	; VRAM:スプライトパターンジェネレータの先頭アドレス
SPR_ATR_ADDR:	    EQU	$1B00	; VRAM:スプライトアトリビュートエリアの先頭アドレス

; アニメーションパターンテーブル
PTN_TBL:
	DB 1,2,3,2,0

; スプライトパターンデータ
SPR_PTN_DATA:
	; 00：プレイヤーパターン1
	DB $0F,$1F,$1D,$1D,$1D,$FF,$E7,$E8
	DB $1F,$7F,$3F,$1F,$0F,$0F,$3E,$3E
	DB $F0,$F8,$B8,$B8,$B8,$F8,$E0,$10
	DB $F0,$FC,$FF,$C3,$B8,$B8,$38,$00
	; 01：プレイヤーパターン2
	DB $0F,$1F,$1D,$1D,$1D,$1F,$07,$08
	DB $1F,$3F,$FF,$DF,$0F,$0F,$3E,$3E
	DB $F0,$F8,$B8,$B8,$B8,$F8,$E0,$10
	DB $F0,$FC,$FF,$FB,$F0,$F0,$7C,$7C
	; 02：プレイヤーパターン3
	DB $0F,$1F,$1D,$1D,$1D,$1F,$07,$08
	DB $0F,$3F,$FF,$C3,$1D,$1D,$1C,$00
	DB $F0,$F8,$B8,$B8,$B8,$FF,$E7,$17
	DB $F8,$FE,$FC,$F8,$F0,$F0,$7C,$7C

; スプライトアトリビュート初期値データ
; 1キャラクター4バイト(Y座標,X座標,パターンNo,カラーコード)
SPR_ATR_INIT_DATA:
	DB  90,120,  2, 15			; 00:プレイヤー

LOGIC_TBL:
    DW MOVE_PLAYER, MOVE_ENEMY


; ====================================================================================================
; ワークエリア
; プログラム起動時にcrtでゼロでramに設定される 
; ====================================================================================================
SECTION bss_user

; ウェイトカウンター
WAIT_CNT:
	defs 1

; 入力バッファ(STICK)
INPUT_BUFF_STICK:
    defs 2

; 入力バッファ(STRIG)
INPUT_BUFF_STRIG:
    defs 2

; アニメーションパターン参照アドレス
PTN_ADDR:
	defs 2

; スプライトキャラクターワークテーブル(8byte*n)
; +0:スプライトアトリビュート1バイト目(Y座標)
; +1:スプライトアトリビュート2バイト目(X座標)
; +2:スプライトアトリビュート3バイト目(スプライトパターンNo)
; +3:スプライトアトリビュート4バイト目(カラーコード)
; +4:属性(0:表示対象外、1:プレイヤー、2:敵1)
; +5:移動方向(STICKの値に対応)
; +6:未使用
; +7:未使用
SPR_WK_TBL:
	defs 8*10                   ; とりあえず10キャラクター分


; ====================================================================================================
; ワークエリア
; プログラム起動時にcrtでramに値が設定される 
; ====================================================================================================
SECTION data_user
