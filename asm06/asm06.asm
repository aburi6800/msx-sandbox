; ====================================================================================================
; asm06.asm
; ・文字フォントの定義
; ・固定文字列表示（asm02.asmのサブルーチンを使用）
; ・複数スプライトの移動
; ====================================================================================================
SECTION code_user
PUBLIC _main

_main:
; ====================================================================================================
; 初期処理
; ====================================================================================================
    CALL INIT                   ; 初期設定

    ; テスト
    LD HL,PTN_NAME_ADDR+4*32+7
    LD DE,STRING1
    CALL PRTSTR

    LD HL,PTN_NAME_ADDR+18*32+2
    LD DE,STRING2
    CALL PRTSTR


; ====================================================================================================
; メインループ
; ====================================================================================================
MAINLOOP:

VSYNC:
    ; ■ボール座標更新
    CALL BALL_UPDATE

    ; ■画面更新
    CALL DRAW

	; ■垂直帰線待ち
	HALT

	JR MAINLOOP


; ====================================================================================================
; ボール移動処理
; ====================================================================================================
BALL_UPDATE:
    LD B,MAX_CHR_CNT            ; スプライトキャラクター分繰り返し
    LD HL,SPR_CHR_WK_TBL        ; スプライトキャラクターワークテーブルの先頭アドレス

BALL_UPDATE_L1:
    PUSH BC
    PUSH HL

    ; ■スプライトキャラクターワークテーブルの先頭アドレスをIXに設定
    LD IX,HL

    ; ■ボール移動処理(縦)
    CALL BALL_UPDATE_Y
    ; ■ボール移動処理(横)
    CALL BALL_UPDATE_X

    ; ■次の処理のためにアドレス加算
    POP HL
    LD A,10
    ADD HL,A

    POP BC
    DJNZ BALL_UPDATE_L1

    RET 


; ====================================================================================================
; ボール移動処理（縦）
; IN  : IX = スプライトキャラクターワークテーブルの先頭アドレス
; ====================================================================================================
BALL_UPDATE_Y:
    ; ■移動方向から移動量データのアドレス算出
    LD A,(IX+7)                 ; A=移動方向
    RLCA                        ; A=A*2
    RLCA                        ; A=A*2、ここで移動量データのオフセットがAに設定される
    LD HL,MOVE_DATA             ; HLレジスタに移動量データのアドレスを設定
    ADD HL,A

    ; ■Y座標計算
    PUSH HL
    POP IY                      ; HL -> IY
    LD B,(IY+1)                 ; BC <- 移動量データ
    LD C,(IY)
    LD H,(IX+1)                 ; HL <- スプライトキャラクターワークテーブル Y座標
    LD L,(IX)
    ADC HL,BC                   ; HL=HL+BC

    ; ■Y座標チェック
    LD A,H                      ; 座標値チェック
    CP 191-16                   ; A=A-(191-16)
    JR C,BALL_UPDATE_Y_L3       ; キャリーフラグがONの場合は画面内なのでBALL_UPDATE_Y_L3へ

    LD H,0                      ; H=0
    CP 255-8                    ; 最大移動量を8と仮定した比較
    JR NC,BALL_UPDATE_Y_L1      ; キャリーフラグがOFF(=画面上部にはみ出てた場合)はHはそのままで良いのでBALL_UPDATE_Y_L1へ

    LD H,191-16                 ; H=(191-16)

BALL_UPDATE_Y_L1:
    ; ■Y座標が上端か調べる
    LD A,H
    CP 0
    JR NZ,BALL_UPDATE_Y_L2

    ; ■跳ね返りの方向決定(Y<0の時)
    ; - V=2の時：V=4
    ; - V=8の時：V=6
    LD A,(IX+7)                 ; A=移動方向
    LD (IX+7),4                 ; まずは4とする
    CP 2
    JR Z,BALL_UPDATE_Y_L3
    LD (IX+7),6                 ; V=8の時はここに来る
    JR BALL_UPDATE_Y_L3

BALL_UPDATE_Y_L2:
    ; ■Y座標が画面下端か調べる
    LD A,H
    CP 191-16
    JR NZ,BALL_UPDATE_Y_L3

    ; ■跳ね返りの方向決定(Y>175の時)
    ; - V=4の時：V=2
    ; - V=6の時：V=8
    LD A,(IX+7)                 ; A=移動方向
    LD (IX+7),2                 ; まずは2とする
    CP 4
    JR Z,BALL_UPDATE_Y_L3
    LD (IX+7),8                 ; V=6の時はここに来る

BALL_UPDATE_Y_L3:
    ; ■Y座標を保存
    LD (IX),L
    LD (IX+1),H

    RET


; ====================================================================================================
; ボール移動処理（横）
; IN  : IX = スプライトキャラクターワークテーブルの先頭アドレス
; ====================================================================================================
BALL_UPDATE_X:
    ; ■移動方向から移動量データのアドレス算出
    LD A,(IX+7)                 ; A=移動方向
    RLCA                        ; A=A*2
    RLCA                        ; A=A*2、ここで移動量データのオフセットがAに設定される
    LD HL,MOVE_DATA             ; HLレジスタに移動量データのアドレスを設定
    ADD HL,A

    ; ■X座標計算
    LD B,(IY+3)                 ; BC <- 移動量データ
    LD C,(IY+2)
    LD H,(IX+3)                 ; HL <- スプライトキャラクターワークテーブル Y座標
    LD L,(IX+2)
    ADC HL,BC                   ; HL=HL+BC

    ; ■X座標チェック
    LD A,H                      ; 座標値チェック
    CP 255-16                   ; A=A-(255-16)
    JR C,BALL_UPDATE_X_L3       ; キャリーフラグがONの場合は画面内なのでBALL_UPDATE_X_L3へ

    LD H,0                      ; H=0
    CP 255-8                    ; 最大移動量を8と仮定した比較
    JR NC,BALL_UPDATE_X_L1      ; キャリーフラグがOFF(=画面左部にはみ出てた場合)はHはそのままで良いのでBALL_UPDATE_X_L2へ

    LD H,255-16                 ; H=255-16

BALL_UPDATE_X_L1:
    ; ■X座標が左端か調べる
    LD A,H
    CP 0
    JR NZ,BALL_UPDATE_X_L2

    ; ■跳ね返りの方向決定(X<0の時)
    ; - V=8の時：V=2
    ; - V=6の時：V=4
    LD A,(IX+7)                 ; A=移動方向
    LD (IX+7),2                 ; まずは2とする
    CP 8
    JR Z,BALL_UPDATE_X_L3
    LD (IX+7),4                 ; V=6の時はここに来る
    JR BALL_UPDATE_X_L3

BALL_UPDATE_X_L2:
    ; ■X座標が右端か調べる
    LD A,H
    CP 255-16
    JR NZ,BALL_UPDATE_X_L3

    ; ■跳ね返りの方向決定(X>239の時)
    ; - V=2の時：V=8
    ; - V=4の時：V=6
    LD A,(IX+7)                 ; A=移動方向
    LD (IX+7),8                 ; まずは2とする
    CP 2
    JR Z,BALL_UPDATE_X_L3
    LD (IX+7),6                 ; V=6の時はここに来る

BALL_UPDATE_X_L3:
    ; ■X座標を保存
    LD (IX+2),L
    LD (IX+3),H

    RET


; ====================================================================================================
; 画面更新
; ====================================================================================================
DRAW:
    ; ■スプライトキャラクターワークテーブルからスプライトアトリビュートワークテーブルを設定
    CALL SET_SPR_ATR_WK

    ; ■スプライトアトリビュートエリア設定
    CALL SET_SPR_ATTR_AREA

DRAW_L1:
    DJNZ DRAW_L1

    RET


; ====================================================================================================
; 初期設定
; ====================================================================================================
INIT:
    ; ------------------------------------------------------------------------------------------------
    ; 画面初期化
    ; ------------------------------------------------------------------------------------------------
    ; ■COLOR 15,1,1
    LD A,15                     ; Aレジスタに文字色をロード 
    LD (FORCLR),A               ; Aレジスタの値をワークエリアに格納
    LD A,1                      ; Aレジスタに全景色をロード
    LD (BAKCLR),A               ; Aレジスタの値をワークエリアに格納
;    LD A,1                      ; Aレジスタに背景色をロード
    LD (BDRCLR),A               ; Aレジスタの値をワークエリアに格納

    ; ■SCREEN 1,2,0
    LD A,(REG1SAV)              ; AレジスタにVDPコントロールレジスタ1の値をロード
    OR 2                        ; ビット2を立てる(=スプライトモードを16x16に設定)
    LD (REG1SAV),A              ; Aレジスタの値をVDPコントロールレジスタ1のワークエリアに格納
    LD A,1                      ; Aレジスタにスクリーンモードの値を設定
    CALL CHGMOD                 ; BIOS スクリーンモード変更
    LD A,0                      ; Aレジスタにキークリックスイッチの値(0=OFF)をロード
    LD (CLIKSW),A               ; Aレジスタの値をワークエリアに格納

    ; ■WIDTH 32
    LD A,32                     ; AレジスタにWIDTHの値を設定
    LD (LINL32),A               ; Aレジスタの値をワークエリアに格納

    ; ■KEY OFF
    CALL ERAFNC                 ; BIOS ファンクションキー非表示

    ; ------------------------------------------------------------------------------------------------
    ; PCGパターン定義
    ; ------------------------------------------------------------------------------------------------
	LD HL,PCG_PTN_DATA			; HLレジスタに転送元データの先頭アドレスを設定
    LD DE,PTN_GEN_ADDR+32*8     ; DEレジスタに転送先アドレスを設定
	LD BC,8*64					; BCレジスタにデータサイズを指定
    CALL LDIRVM					; BIOS VRAMブロック転送

    ; ------------------------------------------------------------------------------------------------
    ; スプライトパターン定義
    ; ------------------------------------------------------------------------------------------------
	LD HL,SPR_PTN_DATA			; HLレジスタにスプライトデータの先頭アドレスを設定
    LD DE,SPR_PTN_ADDR			; DEレジスタにスプライトパターンジェネレータの先頭アドレスを設定
	LD BC,8*4					; BCレジスタにスプライトデータのサイズを指定
    CALL LDIRVM					; BIOS VRAMブロック転送

    ; ------------------------------------------------------------------------------------------------
    ; スプライトキャラクターワークエリア初期化
    ; ------------------------------------------------------------------------------------------------
    LD B,MAX_CHR_CNT            ; B=スプライトキャラクター最大数
    LD HL,SPR_CHR_WK_TBL        ; HL=スプライトキャラクターワークテーブルの先頭アドレス
    CALL INIT_RND               ; 乱数シード初期化

INIT_L1:
    PUSH HL                     ; IX=HL
    POP IX

    ; ■Y座標設定
INIT_L2:
    CALL GET_RND                ; 乱数取得(0〜255)
    CP 176                      ; A=A-176
    JR NC,INIT_L2               ; Aが176を超えていたら再度乱数取得
    LD H,A
    LD L,0
    LD (IX+0),L                 ; Y座標(下位)
    LD (IX+1),H                 ; Y座標(上位)

    ; ■X座標設定
INIT_L3:
    CALL GET_RND                ; 乱数取得(0〜255)
    CP 248                      ; A=A-248
    JR NC,INIT_L3               ; Aが248を超えていたら再度乱数取得
    LD H,A
    LD L,0
    LD (IX+2),L                 ; X座標(下位)
    LD (IX+3),H                 ; X座標(上位)

    ; ■パターンNo設定
    LD (IX+4),0                 ; パターンNoは固定でゼロ
    
    ; ■カラーコード設定
INIT_L4:
    CALL GET_RND                ; 乱数取得(0〜255)
    AND 15                      ; 取得した乱数から0〜15の値を取得する
    ADD A,1                     ; A=A+1
    ADD A,1                     ; A=A+1
    CP 15                       ; 
    JR NC,INIT_L4               ; Aが15を超えていたら再度乱数取得
    LD (IX+5),A                 ; カラーコード

    ; ■属性テーブルNo設定
    LD (IX+6),0                 ; ゼロ固定

    ; ■方向設定
    CALL GET_RND                ; 乱数取得(0〜255)
    AND @00000111               ; 取得した乱数から0〜7の値を取得する
    ADD A,2                     ; A=A+2(カラーコード=1は除外するため)
    AND @00001110               ; 下位1ビットを0にする()=2,4,6,8の値にする)
    LD (IX+7),A                 ; 方向

    PUSH IX
    POP HL
    LD DE,10
    ADD HL,DE                   ; テーブルの次の先頭アドレスへ
    DJNZ INIT_L1

	RET


; ====================================================================================================
; スプライトキャラクターワークテーブルからスプライトアトリビュートワークテーブルを設定する
; ====================================================================================================
SET_SPR_ATR_WK:
    LD B,MAX_CHR_CNT            ; スプライトキャラクター分繰り返し
    LD HL,SPR_CHR_WK_TBL        ; スプライトキャラクターワークテーブルの先頭アドレス
    LD DE,SPR_ATR_WK_TBL        ; スプライトアトリビュートワークテーブルの先頭アドレス

SET_SPR_ATR_WK_L1:
    PUSH HL                     ; HL→IX
    POP IX

    PUSH DE                     ; DE→IY
    POP IY

    LD A,(IX+1)                 ; Y座標(上位)    
    LD (IY),A                   ; A→(IY)

    LD A,(IX+3)                 ; X座標(上位)
    LD (IY+1),A                 ; A→(IY+1)

    LD A,(IX+4)                 ; スプライトパターンNo
    LD (IY+2),A                 ; A→(IY+2)

    LD A,(IX+5)                 ; カラーコード
    LD (IY+3),A                 ; A→(IY+3)

    PUSH DE                     ; HL(=スプライトキャラクターワークテーブル)を次の先頭アドレスへ
    LD DE,10
    ADD HL,DE
    POP DE
    
    PUSH HL                     ; DE(=スプライトアトリビュートワークテーブル)を次の先頭アドレスへ
    LD HL,4
    ADD HL,DE
    LD D,H
    LD E,L
    POP HL

    DJNZ SET_SPR_ATR_WK_L1

    RET


; ====================================================================================================
; スプライトアトリビュートエリア設定
; ====================================================================================================
SET_SPR_ATTR_AREA:
    LD HL,SPR_ATR_WK_TBL        ; スプライトアトリビュートワークテーブル
    LD DE,SPR_ATR_ADDR          ; スプライトアトリビュートエリア
    LD BC,4*MAX_CHR_CNT         ; 転送バイト数(4byte*キャラクター数)
    CALL LDIRVM                 ; BIOS VRAMブロック転送

    RET 


; ====================================================================================================
; 文字列表示サブルーチン

; IN  : HL=表示開始VRAMアドレス
;       DE=表示文字データの開始アドレス
; ====================================================================================================
PRTSTR:
	LD A,(DE)				    ; AレジスタにDEレジスタの示すアドレスのデータを取得

	OR 0					    ; 0かどうか
    JR Z,PRTSTR_END			    ; 0の場合はPRTENDへ

	CALL WRTVRM				    ; BIOS WRTVRM呼び出し
	    					    ; - HL : 書き込み先のVRAMアドレス
    	                        ; - A  : 書き込むデータ

	INC HL					    ; HL=HL+1
    INC DE					    ; DE=DE+1
    JR PRTSTR

PRTSTR_END:
	RET


; ====================================================================================================
; 乱数初期化サブルーチン
; ====================================================================================================
INIT_RND:
    LD A,(INTCNT)
    LD (RND_WK),A               ; 乱数のシード値を設定

    RET


; ====================================================================================================
; 乱数取得サブルーチン
; 事前にINIT_RNDを実行しておくこと
; OUT : A = 0〜255の範囲の乱数
; ====================================================================================================
GET_RND:
    PUSH BC
    
    LD A,(RND_WK)               ; 乱数のシード値を乱数ワークエリアから取得
    LD B,A
    LD A,B
    ADD A,A                     ; A=A*2
    ADD A,A                     ; A=A*2
    ADD A,B                     ; A=A+B、ここで元のBレジスタの値が5倍になる
    ADD A,123                   ; 123を加える
    LD (RND_WK),A               ; 乱数ワークエリアに保存

    POP BC

    RET


; ====================================================================================================
; 定数エリア
; romに格納される
; ====================================================================================================
SECTION rodata_user

; ■BIOSアドレス定義
RDVRM:		        EQU $004A	; BIOS RDVRM
WRTVRM:		        EQU $004D	; BIOS WRTVRM
LDIRVM:			    EQU	$005C	; BIOS:VRAMブロック転送
CHGMOD:             EQU $005F   ; BIOS:スクリーンモード変更
ERAFNC:             EQU $00CC   ; BIOS:ファンクションキー非表示
KILBUF:             EQU $0156   ; BIOS:キーバッファクリア
GTSTCK:             EQU $00D5   ; BIOS:カーソルキー・ジョイスティックのの状態取得

; ■システムワークエリアアドレス定義
REG0SAV:            EQU $F3DF   ; VDPコントロールレジスタ0
REG1SAV:            EQU $F3E0   ; VDPコントロールレジスタ1
FORCLR:             EQU $F3E9   ; 前景色
BAKCLR:             EQU $F3EA   ; 背景色
BDRCLR:             EQU $F3EB   ; 周辺色
LINL32:             EQU $F3AF   ; WIDTH値
CLIKSW:             EQU $F3DB   ; キークリックスイッチ(0:OFF,0以外:ON)
INTCNT:             EQU $FCA2   ; システムで1/60秒でインクリメントするワークエリア

; ■VRAMワークエリアアドレス定義
PTN_GEN_ADDR:       EQU $0000   ; VRAM:パターンジェネレータテーブルの先頭アドレス
PTN_NAME_ADDR:      EQU $1800   ; VRAM:パターンネームテーブルの先頭アドレス
SPR_PTN_ADDR:	    EQU $3800	; VRAM:スプライトパターンジェネレータの先頭アドレス
SPR_ATR_ADDR:	    EQU	$1B00	; VRAM:スプライトアトリビュートエリアの先頭アドレス

; ■定数定義
MAX_CHR_CNT:        EQU 20      ; 最大キャラクター数

; ■PCGパターンデータ
PCG_PTN_DATA:
    DB $00,$00,$00,$00,$00,$00,$00,$00
    DB $1C,$1C,$18,$18,$10,$00,$30,$30
    DB $36,$36,$12,$24,$00,$00,$00,$00
    DB $36,$36,$7F,$36,$7F,$36,$36,$00
    DB $08,$3E,$68,$3E,$0B,$3E,$08,$00
    DB $71,$52,$64,$08,$13,$25,$47,$00
    DB $30,$48,$58,$33,$6A,$44,$3B,$00
    DB $18,$18,$08,$10,$00,$00,$00,$00
    DB $0C,$18,$30,$30,$30,$18,$0C,$00
    DB $18,$0C,$06,$06,$06,$0C,$18,$00
    DB $18,$5A,$3C,$18,$3C,$5A,$18,$00
    DB $00,$18,$18,$7E,$18,$18,$00,$00
    DB $00,$00,$00,$00,$30,$10,$20,$00
    DB $00,$00,$00,$3E,$00,$00,$00,$00
    DB $00,$00,$00,$00,$00,$18,$18,$00
    DB $03,$07,$0E,$1C,$38,$70,$60,$00
    DB $1C,$26,$63,$63,$63,$32,$1C,$00
    DB $0C,$1C,$0C,$0C,$0C,$0C,$3F,$00
    DB $3E,$63,$07,$1E,$3C,$70,$7F,$00
    DB $3F,$06,$0C,$1E,$03,$63,$3E,$00
    DB $0E,$1E,$36,$66,$7F,$06,$06,$00
    DB $7E,$60,$7E,$03,$03,$63,$3E,$00
    DB $1E,$30,$60,$7E,$63,$63,$3E,$00
    DB $7F,$63,$06,$0C,$18,$18,$18,$00
    DB $3C,$62,$72,$3C,$4F,$43,$3E,$00
    DB $3E,$63,$63,$3F,$03,$06,$3C,$00
    DB $00,$18,$18,$00,$18,$18,$00,$00
    DB $00,$18,$18,$00,$18,$08,$10,$00
    DB $06,$0C,$18,$30,$18,$0C,$06,$00
    DB $00,$00,$7F,$00,$00,$7F,$00,$00
    DB $30,$18,$0C,$06,$0C,$18,$30,$00
    DB $3E,$63,$63,$06,$0C,$00,$0C,$0C
    DB $3E,$41,$5D,$55,$5F,$4C,$3E,$00
    DB $1C,$36,$63,$63,$7F,$63,$63,$00
    DB $7E,$63,$63,$7E,$63,$63,$7E,$00
    DB $1E,$33,$60,$60,$60,$33,$1E,$00
    DB $7C,$66,$63,$63,$63,$66,$7C,$00
    DB $3F,$30,$30,$3E,$30,$30,$3F,$00
    DB $7F,$60,$60,$7E,$60,$60,$60,$00
    DB $1F,$30,$60,$67,$63,$33,$1F,$00
    DB $63,$63,$63,$7F,$63,$63,$63,$00
    DB $3F,$0C,$0C,$0C,$0C,$0C,$3F,$00
    DB $03,$03,$03,$03,$03,$63,$3E,$00
    DB $63,$66,$6C,$78,$7C,$6E,$67,$00
    DB $30,$30,$30,$30,$30,$30,$3F,$00
    DB $63,$77,$7F,$7F,$6B,$63,$63,$00
    DB $63,$73,$7B,$7F,$6F,$67,$63,$00
    DB $3E,$63,$63,$63,$63,$63,$3E,$00
    DB $7E,$63,$63,$63,$7E,$60,$60,$00
    DB $3E,$63,$63,$63,$6F,$66,$3D,$00
    DB $7E,$63,$63,$67,$7C,$6E,$67,$00
    DB $3C,$66,$60,$3E,$03,$63,$3E,$00
    DB $3F,$0C,$0C,$0C,$0C,$0C,$0C,$00
    DB $63,$63,$63,$63,$63,$63,$3E,$00
    DB $63,$63,$63,$77,$3E,$1C,$08,$00
    DB $63,$63,$6B,$7F,$7F,$77,$63,$00
    DB $63,$77,$3E,$1C,$3E,$77,$63,$00
    DB $33,$33,$33,$1E,$0C,$0C,$0C,$00
    DB $7F,$07,$0E,$1C,$38,$70,$7F,$00
    DB $3C,$30,$30,$30,$30,$30,$3C,$00
    DB $66,$3C,$18,$7E,$18,$7E,$18,$00
    DB $3C,$0C,$0C,$0C,$0C,$0C,$3C,$00
    DB $1C,$36,$63,$00,$00,$00,$00,$00
    DB $00,$00,$00,$00,$00,$00,$7F,$00

; ■スプライトパターンデータ
SPR_PTN_DATA:
    DB $07,$1F,$3F,$77,$6F,$FF,$DF,$FF
    DB $FF,$FF,$FF,$7F,$7F,$3F,$1F,$07
    DB $E0,$F8,$FC,$FE,$FE,$FF,$FF,$FF
    DB $FF,$FF,$FF,$FE,$FE,$FC,$F8,$E0

; ■移動量データ
; Y座標、X座標の移動量をSTICKの値の順に定義
; 計算時の座標値は10倍とし、計算後の座標は1/10とする必要がある
MOVE_DATA:
    DW $0000,$0000              ; STICK=0(未入力)
    DW $FF00,$0000              ; STICK=1(上)
    DW $FF4F,$00B0              ; STICK=2(右上)
    DW $0000,$0100              ; STICK=3(右)
    DW $00B0,$00B0              ; STICK=4(右下)
    DW $0100,$0000              ; STICK=5(下)
    DW $00B0,$FF4F              ; STICK=6(左下)
    DW $0000,$FF00              ; STICK=7(左)
    DW $FF4F,$FF4F              ; STICK=8(左上)

; ■表示文字列データ
STRING1:
	DB "HELLO MSX WORLD !!",0
STRING2:
	DB "PROGRAMMED BY ABURI6800 2021",0


; ====================================================================================================
; ワークエリア
; プログラム起動時にcrtでゼロでramに設定される 
; ====================================================================================================
SECTION bss_user
; ■乱数ワークエリア
RND_WK:
    DB 0

; ■スプライトアトリビュートワークテーブル(4byte*n)
; +0:スプライトアトリビュート1バイト目(Y座標)
; +1:スプライトアトリビュート2バイト目(X座標)
; +2:スプライトアトリビュート3バイト目(スプライトパターンNo)
; +3:スプライトアトリビュート4バイト目(カラーコード)
; +6:未使用
; +7:未使用
SPR_ATR_WK_TBL:
	DEFS 8*MAX_CHR_CNT

; ■スプライトキャラクターワークテーブル(10Byte)
; +0:Y座標(2byte)
; +2:X座標(2byte)
; +4:スプライトパターンNo
; +5:カラーコード(0=非表示)
; +6:属性テーブルNo
; +7:移動方向(STICKの値に対応)  
; +8:未使用
; +9:未使用
SPR_CHR_WK_TBL:
    DEFS 10*MAX_CHR_CNT

; ====================================================================================================
; ワークエリア
; プログラム起動時にcrtでramに値が設定される 
; ====================================================================================================
SECTION data_user

