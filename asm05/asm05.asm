; ====================================================================================================
; asm05.asm
; ・文字フォントの定義
; ・固定文字列表示（asm02.asmのサブルーチンを使用）
; ====================================================================================================
SECTION code_user
PUBLIC _main

_main:
; ====================================================================================================
; 初期処理
; ====================================================================================================
    CALL INIT                   ; 初期設定

    LD HL,PTN_NAME_ADDR+4*32+7
    LD DE,STRING1
    CALL PRTSTR

    LD HL,PTN_NAME_ADDR+18*32+2
    LD DE,STRING2
    CALL PRTSTR

; ====================================================================================================
; メインループ
; ====================================================================================================
MAINLOOP:

VSYNC:
	; ■垂直帰線待ち
	HALT

	JR MAINLOOP


; ====================================================================================================
; 文字列表示サブルーチン
; IN  : HL=表示開始VRAMアドレス
;       DE=表示文字データの開始アドレス
; ====================================================================================================
PRTSTR:
	LD A,(DE)				    ; AレジスタにDEレジスタの示すアドレスのデータを取得

	OR 0					    ; 0かどうか
    JR Z,PRTSTR_END			    ; 0の場合はPRTENDへ

	CALL WRTVRM				    ; BIOS WRTVRM呼び出し
	    					    ; - HL : 書き込み先のVRAMアドレス
    	                        ; - A  : 書き込むデータ

	INC HL					    ; HL=HL+1
    INC DE					    ; DE=DE+1
    JR PRTSTR

PRTSTR_END:
	RET


; ====================================================================================================
; 初期設定
; ====================================================================================================
INIT:
    ; ------------------------------------------------------------------------------------------------
    ; 画面初期化
    ; ------------------------------------------------------------------------------------------------
    ; ■COLOR 15,1,1
    LD A,15                     ; Aレジスタに文字色をロード 
    LD (FORCLR),A               ; Aレジスタの値をワークエリアに格納
    LD A,1                      ; Aレジスタに全景色をロード
    LD (BAKCLR),A               ; Aレジスタの値をワークエリアに格納
;    LD A,1                      ; Aレジスタに背景色をロード
    LD (BDRCLR),A               ; Aレジスタの値をワークエリアに格納

    ; ■SCREEN 1,2,0
    LD A,(REG1SAV)              ; AレジスタにVDPコントロールレジスタ1の値をロード
    OR 2                        ; ビット2を立てる(=スプライトモードを16x16に設定)
    LD (REG1SAV),A              ; Aレジスタの値をVDPコントロールレジスタ1のワークエリアに格納
    LD A,1                      ; Aレジスタにスクリーンモードの値を設定
    CALL CHGMOD                 ; BIOS スクリーンモード変更
    LD A,0                      ; Aレジスタにキークリックスイッチの値(0=OFF)をロード
    LD (CLIKSW),A               ; Aレジスタの値をワークエリアに格納

    ; ■WIDTH 32
    LD A,32                     ; AレジスタにWIDTHの値を設定
    LD (LINL32),A               ; Aレジスタの値をワークエリアに格納

    ; ■KEY OFF
    CALL ERAFNC                 ; BIOS ファンクションキー非表示

    ; ------------------------------------------------------------------------------------------------
    ; PCGパターン定義
    ; ------------------------------------------------------------------------------------------------
	LD HL,FONT_PTN_DATA			; HLレジスタに転送元データの先頭アドレスを設定
    LD DE,PTN_GEN_ADDR+32*8     ; DEレジスタに転送先アドレスを設定
	LD BC,8*64					; BCレジスタにデータサイズを指定
    CALL LDIRVM					; BIOS VRAMブロック転送

	RET


; ====================================================================================================
; 定数エリア
; romに格納される
; ====================================================================================================
SECTION rodata_user

; BIOSアドレス定義
RDVRM:		        EQU $004A	; BIOS RDVRM
WRTVRM:		        EQU $004D	; BIOS WRTVRM
LDIRVM:			    EQU	$005C	; BIOS:VRAMブロック転送
CHGMOD:             EQU $005F   ; BIOS:スクリーンモード変更
ERAFNC:             EQU $00CC   ; BIOS:ファンクションキー非表示
KILBUF:             EQU $0156   ; BIOS:キーバッファクリア
GTSTCK:             EQU $00D5   ; BIOS:カーソルキー・ジョイスティックのの状態取得

; システムワークエリアアドレス定義
REG0SAV:            EQU $F3DF   ; VDPコントロールレジスタ0
REG1SAV:            EQU $F3E0   ; VDPコントロールレジスタ1
FORCLR:             EQU $F3E9   ; 前景色
BAKCLR:             EQU $F3EA   ; 背景色
BDRCLR:             EQU $F3EB   ; 周辺色
LINL32:             EQU $F3AF   ; WIDTH値
CLIKSW:             EQU $F3DB   ; キークリックスイッチ(0:OFF,0以外:ON)

; VRAMワークエリアアドレス定義
PTN_GEN_ADDR:       EQU $0000   ; VRAM:パターンジェネレータテーブルの先頭アドレス
PTN_NAME_ADDR:      EQU $1800   ; VRAM:パターンネームテーブルの先頭アドレス

; フォントパターンデータ
FONT_PTN_DATA:
    DB  $00,$00,$00,$00,$00,$00,$00,$00
    DB  $1C,$1C,$18,$18,$10,$00,$30,$30
    DB  $36,$36,$12,$24,$00,$00,$00,$00
    DB  $36,$36,$7F,$36,$7F,$36,$36,$00
    DB  $08,$3E,$68,$3E,$0B,$3E,$08,$00
    DB  $71,$52,$64,$08,$13,$25,$47,$00
    DB  $30,$48,$58,$33,$6A,$44,$3B,$00
    DB  $18,$18,$08,$10,$00,$00,$00,$00
    DB  $0C,$18,$30,$30,$30,$18,$0C,$00
    DB  $18,$0C,$06,$06,$06,$0C,$18,$00
    DB  $18,$5A,$3C,$18,$3C,$5A,$18,$00
    DB  $00,$18,$18,$7E,$18,$18,$00,$00
    DB  $00,$00,$00,$00,$30,$10,$20,$00
    DB  $00,$00,$00,$3E,$00,$00,$00,$00
    DB  $00,$00,$00,$00,$00,$18,$18,$00
    DB  $03,$07,$0E,$1C,$38,$70,$60,$00
    DB  $1C,$26,$63,$63,$63,$32,$1C,$00
    DB  $0C,$1C,$0C,$0C,$0C,$0C,$3F,$00
    DB  $3E,$63,$07,$1E,$3C,$70,$7F,$00
    DB  $3F,$06,$0C,$1E,$03,$63,$3E,$00
    DB  $0E,$1E,$36,$66,$7F,$06,$06,$00
    DB  $7E,$60,$7E,$03,$03,$63,$3E,$00
    DB  $1E,$30,$60,$7E,$63,$63,$3E,$00
    DB  $7F,$63,$06,$0C,$18,$18,$18,$00
    DB  $3C,$62,$72,$3C,$4F,$43,$3E,$00
    DB  $3E,$63,$63,$3F,$03,$06,$3C,$00
    DB  $00,$18,$18,$00,$18,$18,$00,$00
    DB  $00,$18,$18,$00,$18,$08,$10,$00
    DB  $06,$0C,$18,$30,$18,$0C,$06,$00
    DB  $00,$00,$7F,$00,$00,$7F,$00,$00
    DB  $30,$18,$0C,$06,$0C,$18,$30,$00
    DB  $3E,$63,$63,$06,$0C,$00,$0C,$0C
    DB  $3E,$41,$5D,$55,$5F,$4C,$3E,$00
    DB  $1C,$36,$63,$63,$7F,$63,$63,$00
    DB  $7E,$63,$63,$7E,$63,$63,$7E,$00
    DB  $1E,$33,$60,$60,$60,$33,$1E,$00
    DB  $7C,$66,$63,$63,$63,$66,$7C,$00
    DB  $3F,$30,$30,$3E,$30,$30,$3F,$00
    DB  $7F,$60,$60,$7E,$60,$60,$60,$00
    DB  $1F,$30,$60,$67,$63,$33,$1F,$00
    DB  $63,$63,$63,$7F,$63,$63,$63,$00
    DB  $3F,$0C,$0C,$0C,$0C,$0C,$3F,$00
    DB  $03,$03,$03,$03,$03,$63,$3E,$00
    DB  $63,$66,$6C,$78,$7C,$6E,$67,$00
    DB  $30,$30,$30,$30,$30,$30,$3F,$00
    DB  $63,$77,$7F,$7F,$6B,$63,$63,$00
    DB  $63,$73,$7B,$7F,$6F,$67,$63,$00
    DB  $3E,$63,$63,$63,$63,$63,$3E,$00
    DB  $7E,$63,$63,$63,$7E,$60,$60,$00
    DB  $3E,$63,$63,$63,$6F,$66,$3D,$00
    DB  $7E,$63,$63,$67,$7C,$6E,$67,$00
    DB  $3C,$66,$60,$3E,$03,$63,$3E,$00
    DB  $3F,$0C,$0C,$0C,$0C,$0C,$0C,$00
    DB  $63,$63,$63,$63,$63,$63,$3E,$00
    DB  $63,$63,$63,$77,$3E,$1C,$08,$00
    DB  $63,$63,$6B,$7F,$7F,$77,$63,$00
    DB  $63,$77,$3E,$1C,$3E,$77,$63,$00
    DB  $33,$33,$33,$1E,$0C,$0C,$0C,$00
    DB  $7F,$07,$0E,$1C,$38,$70,$7F,$00
    DB  $3C,$30,$30,$30,$30,$30,$3C,$00
    DB  $66,$3C,$18,$7E,$18,$7E,$18,$00
    DB  $3C,$0C,$0C,$0C,$0C,$0C,$3C,$00
    DB  $1C,$36,$63,$00,$00,$00,$00,$00
    DB  $00,$00,$00,$00,$00,$00,$7F,$00

; 表示文字列データ
STRING1:
	DB "HELLO MSX WORLD !!",0

; スコア下2桁の表示文字列
STRING2:
	DB "PROGRAMMED BY ABURI6800 2021",0


; ====================================================================================================
; ワークエリア
; プログラム起動時にcrtでゼロでramに設定される 
; ====================================================================================================
SECTION bss_user


; ====================================================================================================
; ワークエリア
; プログラム起動時にcrtでramに値が設定される 
; ====================================================================================================
SECTION data_user
