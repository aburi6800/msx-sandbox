; ====================================================================================================
; asm07.asm
; sound test program
; ====================================================================================================
SECTION code_user
PUBLIC _main

_main:
; ====================================================================================================
; テスト用の処理
; ====================================================================================================
INIT:
    ; ■ドライバ初期化
    ;   利用するアプリケーションで行う処理
    CALL SOUNDDRV_INIT

    LD A,0
    LD (STRIG_BUFF),A

MAINLOOP:
    LD A,0                          ; A <- ジョイスティック番号=0(キーボード)
    CALL GTTRIG                     ; BIOS トリガボタンの状態取得
                                    ; - $00 = 押されていない
                                    ; - $0FF = 押されている
    OR A
    JR Z,MAINLOOP_2                 ; ゼロならトリガボタンのバッファをクリアする

    ; ■トリガボタンのバッファ値を判定
    LD A,(STRIG_BUFF)
    OR A
    JR NZ,MAINLOOP_VSYNC            ; ゼロでなければ押しっぱなしなのでスキップ

MAINLOOP_1:
    ; ■音を鳴らす
    LD HL,MUSIC02
    CALL SOUNDDRV_PLAY

    ; ■トリガボタンのバッファに1を設定
    LD A,1
    LD (STRIG_BUFF),A
    JR MAINLOOP_VSYNC

MAINLOOP_2:
    ; ■トリガボタンのバッファに0を設定
    LD A,0
    LD (STRIG_BUFF),A

MAINLOOP_VSYNC:
    ; ■ここがドライバ本体
    ;   最終的には割り込み処理として入れたい
    CALL SOUNDDRV_EXEC

	; ■垂直帰線待ち
	HALT

	JR MAINLOOP


; ====================================================================================================
; ドライバ初期化
; ====================================================================================================
SOUNDDRV_INIT:
	CALL GICINI		                ; GICINI	PSGの初期化

    ; ■音を出す設定
	LD A,7			                ; PSGレジスタ番号=7(チャンネル設定)
	LD E,%10111000	                ; 各チャンネルのON/OFF設定 0:ON 1:OFF,10+NOISE C～A+TONE C～A
	CALL WRTPSG		                ; BIOS WRTPSG  PSGレジスタへデータを書き込み

    ; ■ ドライバステータス初期化
    LD A,(SOUNDDRV_STOP)
    LD (SOUNDDRV_STATE),A

    ; ■ ドライバグローバルワークエリア初期化
    LD HL,$0000
    LD BC,0
    LD (SOUNDDRV_MUSIC_ADDR),BC
    LD HL,SOUNDDRV_TEMPO_CNT
    LD (HL),0
    LD HL,SOUNDDRV_MASTER_VOL
    LD (HL),15
    LD HL,SOUNDDRV_FADE_SPD
    LD (HL),0

    ; ■ ドライバワークエリア初期化
    LD HL,SOUNDDRV_BGMWK
    LD B,SOUNDDRV_WORK_DATASIZE*6
    
SOUNDDRV_INIT_1:
    LD (HL),0
    INC HL
    DJNZ SOUNDDRV_INIT_1

    RET


; ====================================================================================================
; BGM演奏開始
; IN  : HL = 曲データの先頭アドレス
;            曲データの構成は以下とする
;              テンポ:1byte
;              トラック1のデータアドレス:2byte
;              トラック2のデータアドレス:2byte
;              トラック3のデータアドレス:2byte
; ====================================================================================================
SOUNDDRV_PLAY:
    LD IX,HL

    ; ■曲データアドレスを設定
    LD (SOUNDDRV_MUSIC_ADDR),IX
    INC IX                          ; 最初の1byteは<未使用>テンポなので飛ばす

    ; ■各チャンネルの初期設定
    LD DE,SOUNDDRV_BGMWK            ; BGMワークエリアの先頭アドレス
    LD B,3                          ; チャンネル数

SOUNDDRV_PLAY_L1:
    ;   ウェイトカウンタ
    ;   最初に必ずゼロになるように、初期値を1とする
    LD A,1
    LD (DE),A
    INC DE

    ;   次に読む曲データのアドレス
    ;   トラックデータの先頭アドレスを設定
    LD A,(IX)
    LD (DE),A
    INC DE
    LD A,(IX+1)
    LD (DE),A
    INC DE

    ;   トラックデータの先頭アドレス
    LD A,(IX)
    LD (DE),A
    INC DE
    LD A,(IX+1)
    LD (DE),A
    INC DE

    ;   デチューン値
    LD A,0
    LD (DE),A
    INC DE

    ;   未使用
    LD A,0
    LD (DE),A
    INC DE

    ;   未使用
    LD A,0
    LD (DE),A
    INC DE

    LD HL,SOUNDDRV_STATE            ; サウンドドライバの状態に+1
    INC (HL)

    INC IX                          ; 次のトラックデータのアドレスに設定
    INC IX

    DJNZ SOUNDDRV_PLAY_L1

    RET


; ====================================================================================================
; 効果音演奏開始
; IN  : HL = 効果音データの先頭アドレス
;            効果音データの構成は以下とする
;              テンポ:1byte
;              トラック1のデータアドレス:2byte ゼロ=なし
;              トラック2のデータアドレス:2byte ゼロ=なし
;              トラック3のデータアドレス:2byte ゼロ=なし
; ====================================================================================================
SOUNDDRV_SFXPLAY:
    LD IX,HL

    ; ■効果音データアドレスを設定
    LD (SOUNDDRV_MUSIC_ADDR),HL
    INC HL                          ; 最初の1byteは<未使用>テンポなので飛ばす

    ; ■各チャンネルの初期設定
    LD DE,SOUNDDRV_SFXWK
    LD B,3                          ; チャンネル数

SOUNDDRV_PLAY_L1:
    LD IX,HL
    INC HL
    INC HL
    ;   ウェイトカウンタ
    ;   最初に必ずゼロになるように、初期値を1とする
    LD A,1
    LD (DE),A
    INC DE
    ;   次に読む曲データのアドレス
    ;   曲データの先頭アドレスを設定
    LD A,(IX)
    LD (DE),A
    INC DE
    LD A,(IX+1)
    LD (DE),A
    INC DE
    ;   曲データの先頭アドレス
    LD A,(IX)
    LD (DE),A
    INC DE
    LD A,(IX+1)
    LD (DE),A
    INC DE
    ;   デチューン値
    LD A,0
    LD (DE),A
    INC DE
    ;   未使用
    LD A,0
    LD (DE),A
    INC DE
    ;   未使用
    LD A,0
    LD (DE),A
    INC DE

    DJNZ SOUNDDRV_PLAY_L1

    RET


; ====================================================================================================
; 演奏停止
; ====================================================================================================
SOUNDDRV_STOP:
    LD A,(SOUNDDRV_STOP)
    LD (SOUNDDRV_STATE),A

    RET


; ====================================================================================================
; 演奏処理
; ====================================================================================================
SOUNDDRV_EXEC:
    ; ■サウンドドライバのステータス判定
    LD A,(SOUNDDRV_STATE)           ; A <- サウンドドライバの状態
    OR A
    RET Z                           ; ゼロ(停止)なら抜ける

    ; ■各チャンネルの処理
    LD A,0                          ; A <- チャンネル(0=ChA)
    CALL SOUNDDRV_CHEXEC
    LD A,1                          ; A <- チャンネル(1=ChB)
    CALL SOUNDDRV_CHEXEC
    LD A,2                          ; A <- チャンネル(2=ChC)
    CALL SOUNDDRV_CHEXEC

    RET

; ----------------------------------------------------------------------------------------------------
; 各チャンネルの処理
; IN  : A  = チャンネル(0〜2)
; ----------------------------------------------------------------------------------------------------
SOUNDDRV_CHEXEC:
    LD D,A                          ; A -> D (Dレジスタにチャンネルの値を退避)

    ; ■チャンネルに対応するワークエリアの先頭アドレスを求める
    ;   チャンネル数×8byte、ただしチャンネル数がゼロのときは計算不要
    OR A
    JR Z,SOUNDDRV_CHEXEC_L1

    SLA A                           ; A=A*8
    SLA A
    SLA A

SOUNDDRV_CHEXEC_L1:
    LD HL,SOUNDDRV_BGMWK
    LD B,0
    LD C,A
    ADD HL,BC
    PUSH HL                        ; IX <- チャンネルに対応するワークエリアの先頭アドレス
    POP IX
    
    ; ■発声中の音のウェイトカウンタを減算
    ;   上の処理でHLにワークエリアの先頭アドレスが設定済なのでそのまま使う
    DEC (HL)
    RET NZ                          ; ゼロでない場合は発声中なので抜ける

SOUNDDRV_CHEXEC_L2:
    ; ■対象チャンネルの曲データを取得
    CALL SOUNDDRV_GETNEXTNATA       ; A <- 曲データ

    CP $FF                          ; データ=255(終端)か
    RET Z                           ; 抜ける

    CP 200                          ; データ=200(ボリューム)か
    JP Z,SOUNDDRV_CHEXEC_CMD200     ; ボリューム設定処理へ

    CP 210                          ; データ=210(デチューン値)か
    JP Z,SOUNDDRV_CHEXEC_CMD210     ; デチューン値設定処理へ

    ; ■データ=0〜190のときの処理
    ;   トーンテーブルから該当するデータを取得し、PSGレジスタ0〜5に設定する
    ;   次のデータを取得して、該当チャンネルのウェイトカウンタに設定する
    LD B,0                          ; BC <- A(トーンテーブルのインデックス)
    LD C,A    
    LD HL,SOUNDDRV_TONETBL          ; HL <- トーンテーブルの先頭アドレス
    ADD HL,BC                       ; トーンデータは2byteなのでインデックスx2とする
    ADD HL,BC

    ; ■PSGレジスタ0〜5に周波数設定
    ;   チャンネルA:0,1
    ;   チャンネルB:2,3
    ;   チャンネルC:4,5
    LD A,(HL)                       ; A <- トーンデータ
    SUB (IX+5)                      ; デチューン値を減算
    LD E,A                          ; E <- A(計算後のトーンデータ)
    LD A,D                          ; A <- Dレジスタに退避した値(チャンネル)
    ADD A,A                         ; PSGレジスタ番号=0/2/4(下位8ビット)
    CALL WRTPSG
    
    INC A                           ; PSGレジスタ番号=1/3/5(上位4ビット)
    INC HL
    LD E,(HL)                       ; E <- トーンデータ
    CALL WRTPSG

    ; ■該当チャンネルのウェイトカウンタ設定
    CALL SOUNDDRV_GETNEXTNATA       ; A <- 曲データ
    LD (IX),A                       ; ワークに現在のトーンのウェイトカウンタを設定

    JP SOUNDDRV_CHEXEC_L3

SOUNDDRV_CHEXEC_CMD200:
    ; ■ボリューム設定処理
    ;   次のトラックデータを取得して、PSGレジスタ8〜10(chA〜C)に設定する
    ;   そして次のトラックデータの処理を行う
    CALL SOUNDDRV_GETNEXTNATA       ; A <- 次のデータ(ボリューム)
    LD E,A                          ; E <- データ(ボリューム)
    LD A,D                          ; A <- チャンネル(0〜2)
    ADD A,8                         ; PSGレジスタ8〜10に指定するため+8
    CALL WRTPSG

    JP SOUNDDRV_CHEXEC_L2

SOUNDDRV_CHEXEC_CMD210:
    ; ■デチューン値設定処理
    ;   次のトラックデータを取得して、ワークエリアに設定する
    ;   そして次のトラックデータの処理を行う
    CALL SOUNDDRV_GETNEXTNATA       ; A <- 次のトラックデータ(デチューン値)
    LD (IX+5),A

    JP SOUNDDRV_CHEXEC_L2

SOUNDDRV_CHEXEC_L3:
    RET

; ----------------------------------------------------------------------------------------------------
; 次に読むトラックデータのアドレスからデータを取得する
; 同時に、トラックデータの取得アドレスも更新する
; データが終端(=$FF)の場合は、トラックデータの取得アドレスを先頭アドレスに戻す
; IN  : IX = トラックワークエリアの先頭アドレス
; OUT : A = トラックデータ
; ----------------------------------------------------------------------------------------------------
SOUNDDRV_GETNEXTNATA:
    ; ■トラックデータを取得
    LD C,(IX+1)                     ; BC <- トラックデータの取得アドレス
    LD B,(IX+2)
    LD A,(BC)                       ; A <- 曲データ

    ; ■終端判定
    CP $FF                          ; トラックデータ=$FFか
    RET Z                           ; 終端の場合はそのまま処理終了

    ; ■次に読む曲データのアドレスを+1
    INC BC

    ; ■ループ判定
    CP $FE                          ; トラックデータ=$FEか
    JR NZ,SOUNDDRV_GETNEXTNATA_2    ; $FEでなければスキップ

    ; ■トラックデータを先頭に戻す
    ;   @TODO:終端データに戻し先のカウントを設定できるようにしたい（BGMのイントロを飛ばす対応）
    LD C,(IX+3)                     ; BC <- トラックデータの先頭アドレス
    LD B,(IX+4)
    LD A,(BC)                       ; A <- トラックデータを読み直す
    INC BC                          ; 読んだのでアドレスを１つ進める
;    JR SOUNDDRV_GETNEXTNATA_2

SOUNDDRV_GETNEXTNATA_2:
    ; ■次に読むトラックデータのアドレスを保存
    LD (IX+1),C                     ; BC -> 次に読むトラックデータのアドレス
    LD (IX+2),B

    RET


; ====================================================================================================
; 定数エリア
; romに格納される
; ====================================================================================================
SECTION rodata_user

GTTRIG:                 EQU $00D8   ; BIOS トリガボタンの状態取得

GICINI:	                EQU $0090	; PSGの初期化アドレス
WRTPSG:	                EQU $0093   ; PSGレジスタへのデータ書込アドレス

SOUNDDRV_STATE_STOP:    EQU 0       ; サウンドドライバ状態：停止
SOUNDDRV_STATE_PLAY:    EQU 1       ; サウンドドライバ状態：演奏(BGM OR SFX)
SOUNDDRV_STATE_ALLPLAY: EQU 2       ; サウンドドライバ状態：演奏(BGM+SFX)

SOUNDDRV_WORK_DATASIZE: EQU 8       ; サウンドドライバ1chのワークエリアサイズ


; ====================================================================================================
; トーンテーブル
; ====================================================================================================
SOUNDDRV_TONETBL:
;          C   C+    D   D+    E    F   F+    G   G+    A   A+    B
	dw  3420,3229,3047,2876,2715,2562,2419,2283,2155,2034,1920,1812 ;o1  0〜 11
	dw  1710,1614,1524,1438,1357,1281,1209,1141,1077,1017, 960, 906 ;o2 12〜 23
	dw   855, 807, 762, 719, 679, 641, 605, 571, 539, 508, 480, 453 ;o3 24〜 35
	dw   428, 404, 381, 360, 339, 320, 302, 285, 269, 254, 240, 226 ;o4 36〜 47
	dw   214, 202, 190, 180, 170, 160, 151, 143, 135, 127, 120, 113 ;o5 48〜 59
	dw   107, 101,  95,  90,  85,  80,  76,  71,  67,  64,  60,  57 ;o6 60〜 71
	dw    53,  50,  48,  45,  42,  40,  38,  36,  34,  32,  30,  28 ;o7 72〜 83
	dw    27,  25,  24,  22,  21,  20,  19,  18,  17,  16,  15,  14 ;o8 84〜 95


; ====================================================================================================
; 曲データ
; ====================================================================================================
MUSIC01:
    DB  8                           ; <未使用>テンポ(4分音符＝n/60秒とした場合の値)
    DW  MUSIC01_TRK1
    DW  MUSIC01_TRK2
    DW  $0000

MUSIC01_TRK1:
    DB  200, 15                     ; ボリューム
    DB   36,  6, 48, 6, 47, 6, 48, 6
    DB   52,  6, 48, 6, 47, 6, 48, 6
    DB   36,  6, 48, 6, 46, 6, 48, 6
    DB   52,  6, 48, 6, 46, 6, 48, 6
    DB   36,  6, 48, 6, 45, 6, 48, 6
    DB   52,  6, 48, 6, 45, 6, 48, 6
    DB   36,  6, 48, 6, 44, 6, 48, 6
    DB   52,  6, 48, 6, 44, 6, 48, 6
    DB  254,  0

MUSIC01_TRK2:
    DB  200, 13                     ; ボリューム
    DB  210,  2                     ; デチューン値
    DB   36, 10, 48, 6, 47, 6, 48, 6
    DB   52,  6, 48, 6, 47, 6, 48, 6
    DB   36,  6, 48, 6, 46, 6, 48, 6
    DB   52,  6, 48, 6, 46, 6, 48, 6
    DB   36,  6, 48, 6, 45, 6, 48, 6
    DB   52,  6, 48, 6, 45, 6, 48, 6
    DB   36,  6, 48, 6, 44, 6, 48, 6
    DB   52,  6, 48, 6, 44, 6, 48, 2
    DB  254,  0

MUSIC01_TRK3:
    DB  255


SFX01:
    DB  8                           ; <未使用>テンポ(4分音符＝n/60秒とした場合の値)
    DW  SFX01_TRK1
    DW  SFX02_TRK2
    DW  SGX02_TRK3

SFX01_TRK1:
    DB  200, 15
    DB   61,  3
    DB  200,  0
    DB  255

SFX01_TRK2:
    DB  200, 15
    DB   60,  3, 200, 10, 60,  3,200,  8, 60,  3,200,  6, 60,  3, 200,  4, 60,  3
    DB  200,  0
    DB  255 

SFX01_TRK3:
    DB  200, 13
    DB  210,  2
    DB   60,  3, 200,  8, 60,  3,200,  6, 60,  3,200,  4, 60,  3, 200,  2, 60,  3
    DB  200,  0
    DB  255


; ====================================================================================================
; ワークエリア
; プログラム起動時にcrtでゼロでramに設定される 
; ====================================================================================================
SECTION bss_user

; ----------------------------------------------------------------------------------------------------
; ドライバステータス
; ----------------------------------------------------------------------------------------------------
SOUNDDRV_STATE:
    DB  SOUNDDRV_STATE_STOP         ; サウンドドライバ状態初期値

; ----------------------------------------------------------------------------------------------------
; ドライバグローバルワークエリア
; ----------------------------------------------------------------------------------------------------
SOUNDDRV_MUSIC_ADDR:
    DW  $0000                       ; 曲データアドレス
SOUNDDRV_SFX_ADDR:
    DW  $0000                       ; 効果音データアドレス
SOUNDDRV_TEMPO_CNT:
    DB  0                           ; <未使用>テンポカウンタ(4分音符=n/60秒とした値)
SOUNDDRV_MASTER_VOL:
    DB  15                          ; <未使用>サウンドドライバマスターボリューム
SOUNDDRV_FADE_SPD:
    DB  0                           ; <未使用>サウンドドライバフェードアウトスピード(速0<->255遅)

; ----------------------------------------------------------------------------------------------------
; BGMワークエリア
; ----------------------------------------------------------------------------------------------------
SOUNDDRV_BGMWK:
    ; トラック1
    DB  $00                         ; ウェイトカウンタ(1音＝n/60秒)
    DW  $0000                       ; トラックデータの取得アドレス
    DW  $0000                       ; トラックデータの先頭アドレス
    DB  $00                         ; デチューン値
    DB  $00                         ; 予備
    DB  $00                         ; 予備
    ; トラック2
    DB  $00                         ; ウェイトカウンタ(1音＝n/60秒)
    DW  $0000                       ; トラックデータの取得アドレス
    DW  $0000                       ; トラックデータの先頭アドレス
    DB  $00                         ; デチューン値
    DB  $00                         ; 予備
    DB  $00                         ; 予備
    ; トラック3
    DB  $00                         ; ウェイトカウンタ(1音＝n/60秒)
    DW  $0000                       ; トラックデータの取得アドレス
    DW  $0000                       ; トラックデータの先頭アドレス
    DB  $00                         ; デチューン値
    DB  $00                         ; 予備
    DB  $00                         ; 予備

; ----------------------------------------------------------------------------------------------------
; SFXワークエリア
; ----------------------------------------------------------------------------------------------------
SOUNDDRV_SFXWK:
    ; トラック4(SFX1)
    DB  $00                         ; ウェイトカウンタ(1音＝n/60秒)
    DW  $0000                       ; トラックデータの取得アドレス
    DW  $0000                       ; トラックデータの先頭アドレス
    DB  $00                         ; デチューン値
    DB  $00                         ; 予備
    DB  $00                         ; 予備
    ; トラック5(SFX2)
    DB  $00                         ; ウェイトカウンタ(1音＝n/60秒)
    DW  $0000                       ; トラックデータの取得アドレス
    DW  $0000                       ; トラックデータの先頭アドレス
    DB  $00                         ; デチューン値
    DB  $00                         ; 予備
    DB  $00                         ; 予備
    ; トラック6(SFX3)
    DB  $00                         ; ウェイトカウンタ(1音＝n/60秒)
    DW  $0000                       ; トラックデータの取得アドレス
    DW  $0000                       ; トラックデータの先頭アドレス
    DB  $00                         ; デチューン値
    DB  $00                         ; 予備
    DB  $00                         ; 予備

; ----------------------------------------------------------------------------------------------------
; その他ワークエリア（ドライバでは未使用）
; ----------------------------------------------------------------------------------------------------
STRIG_BUFF:
    DB 0
